{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nconst formatter = ({\n  series,\n  seriesOrder\n}, dataset) => {\n  const completeSeries = Object.fromEntries(Object.entries(series).map(([seriesId, seriesData]) => {\n    const datasetKeys = seriesData?.datasetKeys;\n    const missingKeys = ['x', 'y', 'id'].filter(key => typeof datasetKeys?.[key] !== 'string');\n    if (seriesData?.datasetKeys && missingKeys.length > 0) {\n      throw new Error([`MUI X: scatter series with id='${seriesId}' has incomplete datasetKeys.`, `Properties ${missingKeys.map(key => `\"${key}\"`).join(', ')} are missing.`].join('\\n'));\n    }\n    const data = !datasetKeys ? seriesData.data ?? [] : dataset?.map(d => {\n      return {\n        x: d[datasetKeys.x],\n        y: d[datasetKeys.y],\n        z: datasetKeys.z && d[datasetKeys.z],\n        id: d[datasetKeys.id]\n      };\n    }) ?? [];\n    return [seriesId, _extends({}, seriesData, {\n      data,\n      valueFormatter: seriesData.valueFormatter ?? (v => `(${v.x}, ${v.y})`)\n    })];\n  }));\n  return {\n    series: completeSeries,\n    seriesOrder\n  };\n};\nexport default formatter;","map":{"version":3,"names":["_extends","formatter","series","seriesOrder","dataset","completeSeries","Object","fromEntries","entries","map","seriesId","seriesData","datasetKeys","missingKeys","filter","key","length","Error","join","data","d","x","y","z","id","valueFormatter","v"],"sources":["D:/Vaishali/demo2/node_modules/@mui/x-charts/ScatterChart/formatter.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nconst formatter = ({\n  series,\n  seriesOrder\n}, dataset) => {\n  const completeSeries = Object.fromEntries(Object.entries(series).map(([seriesId, seriesData]) => {\n    const datasetKeys = seriesData?.datasetKeys;\n    const missingKeys = ['x', 'y', 'id'].filter(key => typeof datasetKeys?.[key] !== 'string');\n    if (seriesData?.datasetKeys && missingKeys.length > 0) {\n      throw new Error([`MUI X: scatter series with id='${seriesId}' has incomplete datasetKeys.`, `Properties ${missingKeys.map(key => `\"${key}\"`).join(', ')} are missing.`].join('\\n'));\n    }\n    const data = !datasetKeys ? seriesData.data ?? [] : dataset?.map(d => {\n      return {\n        x: d[datasetKeys.x],\n        y: d[datasetKeys.y],\n        z: datasetKeys.z && d[datasetKeys.z],\n        id: d[datasetKeys.id]\n      };\n    }) ?? [];\n    return [seriesId, _extends({}, seriesData, {\n      data,\n      valueFormatter: seriesData.valueFormatter ?? (v => `(${v.x}, ${v.y})`)\n    })];\n  }));\n  return {\n    series: completeSeries,\n    seriesOrder\n  };\n};\nexport default formatter;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,MAAMC,SAAS,GAAGA,CAAC;EACjBC,MAAM;EACNC;AACF,CAAC,EAAEC,OAAO,KAAK;EACb,MAAMC,cAAc,GAAGC,MAAM,CAACC,WAAW,CAACD,MAAM,CAACE,OAAO,CAACN,MAAM,CAAC,CAACO,GAAG,CAAC,CAAC,CAACC,QAAQ,EAAEC,UAAU,CAAC,KAAK;IAC/F,MAAMC,WAAW,GAAGD,UAAU,EAAEC,WAAW;IAC3C,MAAMC,WAAW,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAACC,MAAM,CAACC,GAAG,IAAI,OAAOH,WAAW,GAAGG,GAAG,CAAC,KAAK,QAAQ,CAAC;IAC1F,IAAIJ,UAAU,EAAEC,WAAW,IAAIC,WAAW,CAACG,MAAM,GAAG,CAAC,EAAE;MACrD,MAAM,IAAIC,KAAK,CAAC,CAAC,kCAAkCP,QAAQ,+BAA+B,EAAE,cAAcG,WAAW,CAACJ,GAAG,CAACM,GAAG,IAAI,IAAIA,GAAG,GAAG,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAACA,IAAI,CAAC,IAAI,CAAC,CAAC;IACrL;IACA,MAAMC,IAAI,GAAG,CAACP,WAAW,GAAGD,UAAU,CAACQ,IAAI,IAAI,EAAE,GAAGf,OAAO,EAAEK,GAAG,CAACW,CAAC,IAAI;MACpE,OAAO;QACLC,CAAC,EAAED,CAAC,CAACR,WAAW,CAACS,CAAC,CAAC;QACnBC,CAAC,EAAEF,CAAC,CAACR,WAAW,CAACU,CAAC,CAAC;QACnBC,CAAC,EAAEX,WAAW,CAACW,CAAC,IAAIH,CAAC,CAACR,WAAW,CAACW,CAAC,CAAC;QACpCC,EAAE,EAAEJ,CAAC,CAACR,WAAW,CAACY,EAAE;MACtB,CAAC;IACH,CAAC,CAAC,IAAI,EAAE;IACR,OAAO,CAACd,QAAQ,EAAEV,QAAQ,CAAC,CAAC,CAAC,EAAEW,UAAU,EAAE;MACzCQ,IAAI;MACJM,cAAc,EAAEd,UAAU,CAACc,cAAc,KAAKC,CAAC,IAAI,IAAIA,CAAC,CAACL,CAAC,KAAKK,CAAC,CAACJ,CAAC,GAAG;IACvE,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,CAAC;EACH,OAAO;IACLpB,MAAM,EAAEG,cAAc;IACtBF;EACF,CAAC;AACH,CAAC;AACD,eAAeF,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}