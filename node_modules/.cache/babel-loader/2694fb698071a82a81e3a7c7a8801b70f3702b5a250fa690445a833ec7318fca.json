{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { defaultizeColor } from \"../../internals/defaultizeColor.js\";\n/**\n * This methods is the interface between what the developer is providing and what components receives\n * To simplify the components behaviors, it groups series by type, such that LinePlots props are not updated if some line data are modified\n * It also add defaultized values such as the ids, colors\n * @param series The array of series provided by the developer\n * @param colors The color palette used to defaultize series colors\n * @returns An object structuring all the series by type.\n */\nexport const preprocessSeries = ({\n  series,\n  colors,\n  seriesFormatters,\n  dataset\n}) => {\n  // Group series by type\n  const seriesGroups = {};\n  series.forEach((seriesData, seriesIndex) => {\n    const {\n      id = `auto-generated-id-${seriesIndex}`,\n      type\n    } = seriesData;\n    if (seriesGroups[type] === undefined) {\n      seriesGroups[type] = {\n        series: {},\n        seriesOrder: []\n      };\n    }\n    if (seriesGroups[type]?.series[id] !== undefined) {\n      throw new Error(`MUI X: series' id \"${id}\" is not unique.`);\n    }\n    seriesGroups[type].series[id] = _extends({\n      id\n    }, defaultizeColor(seriesData, seriesIndex, colors));\n    seriesGroups[type].seriesOrder.push(id);\n  });\n  const formattedSeries = {};\n  // Apply formatter on a type group\n  Object.keys(seriesFormatters).forEach(type => {\n    const group = seriesGroups[type];\n    if (group !== undefined) {\n      formattedSeries[type] = seriesFormatters[type]?.(group, dataset) ?? seriesGroups[type];\n    }\n  });\n  return formattedSeries;\n};","map":{"version":3,"names":["_extends","defaultizeColor","preprocessSeries","series","colors","seriesFormatters","dataset","seriesGroups","forEach","seriesData","seriesIndex","id","type","undefined","seriesOrder","Error","push","formattedSeries","Object","keys","group"],"sources":["D:/Vaishali/demo2/node_modules/@mui/x-charts/context/SeriesProvider/processSeries.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { defaultizeColor } from \"../../internals/defaultizeColor.js\";\n/**\n * This methods is the interface between what the developer is providing and what components receives\n * To simplify the components behaviors, it groups series by type, such that LinePlots props are not updated if some line data are modified\n * It also add defaultized values such as the ids, colors\n * @param series The array of series provided by the developer\n * @param colors The color palette used to defaultize series colors\n * @returns An object structuring all the series by type.\n */\nexport const preprocessSeries = ({\n  series,\n  colors,\n  seriesFormatters,\n  dataset\n}) => {\n  // Group series by type\n  const seriesGroups = {};\n  series.forEach((seriesData, seriesIndex) => {\n    const {\n      id = `auto-generated-id-${seriesIndex}`,\n      type\n    } = seriesData;\n    if (seriesGroups[type] === undefined) {\n      seriesGroups[type] = {\n        series: {},\n        seriesOrder: []\n      };\n    }\n    if (seriesGroups[type]?.series[id] !== undefined) {\n      throw new Error(`MUI X: series' id \"${id}\" is not unique.`);\n    }\n    seriesGroups[type].series[id] = _extends({\n      id\n    }, defaultizeColor(seriesData, seriesIndex, colors));\n    seriesGroups[type].seriesOrder.push(id);\n  });\n  const formattedSeries = {};\n  // Apply formatter on a type group\n  Object.keys(seriesFormatters).forEach(type => {\n    const group = seriesGroups[type];\n    if (group !== undefined) {\n      formattedSeries[type] = seriesFormatters[type]?.(group, dataset) ?? seriesGroups[type];\n    }\n  });\n  return formattedSeries;\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,SAASC,eAAe,QAAQ,oCAAoC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAAC;EAC/BC,MAAM;EACNC,MAAM;EACNC,gBAAgB;EAChBC;AACF,CAAC,KAAK;EACJ;EACA,MAAMC,YAAY,GAAG,CAAC,CAAC;EACvBJ,MAAM,CAACK,OAAO,CAAC,CAACC,UAAU,EAAEC,WAAW,KAAK;IAC1C,MAAM;MACJC,EAAE,GAAG,qBAAqBD,WAAW,EAAE;MACvCE;IACF,CAAC,GAAGH,UAAU;IACd,IAAIF,YAAY,CAACK,IAAI,CAAC,KAAKC,SAAS,EAAE;MACpCN,YAAY,CAACK,IAAI,CAAC,GAAG;QACnBT,MAAM,EAAE,CAAC,CAAC;QACVW,WAAW,EAAE;MACf,CAAC;IACH;IACA,IAAIP,YAAY,CAACK,IAAI,CAAC,EAAET,MAAM,CAACQ,EAAE,CAAC,KAAKE,SAAS,EAAE;MAChD,MAAM,IAAIE,KAAK,CAAC,sBAAsBJ,EAAE,kBAAkB,CAAC;IAC7D;IACAJ,YAAY,CAACK,IAAI,CAAC,CAACT,MAAM,CAACQ,EAAE,CAAC,GAAGX,QAAQ,CAAC;MACvCW;IACF,CAAC,EAAEV,eAAe,CAACQ,UAAU,EAAEC,WAAW,EAAEN,MAAM,CAAC,CAAC;IACpDG,YAAY,CAACK,IAAI,CAAC,CAACE,WAAW,CAACE,IAAI,CAACL,EAAE,CAAC;EACzC,CAAC,CAAC;EACF,MAAMM,eAAe,GAAG,CAAC,CAAC;EAC1B;EACAC,MAAM,CAACC,IAAI,CAACd,gBAAgB,CAAC,CAACG,OAAO,CAACI,IAAI,IAAI;IAC5C,MAAMQ,KAAK,GAAGb,YAAY,CAACK,IAAI,CAAC;IAChC,IAAIQ,KAAK,KAAKP,SAAS,EAAE;MACvBI,eAAe,CAACL,IAAI,CAAC,GAAGP,gBAAgB,CAACO,IAAI,CAAC,GAAGQ,KAAK,EAAEd,OAAO,CAAC,IAAIC,YAAY,CAACK,IAAI,CAAC;IACxF;EACF,CAAC,CAAC;EACF,OAAOK,eAAe;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}